var configScript = require("./config");
var clientModule = require("./client");

/**
 * Simple wrapper of the Orbiwise server's API
 * @class OrbiwiseServer
 * @constructor
 * @param {Object} config: configuration object, optional, defaults to the config script
 */
function OrbiwiseServer(config) {

    this.config = {};
    if (config) {

        for (var key in config) {
            this.config[key] = config[key];
        }

        if (!this.config.orbiwiseUrl) {
            this.config.orbiwiseUrl = configScript.orbiwiseUrl;
        }
    } else {
        this.config = configScript;
    }

    this.client = new clientModule.Client({username: this.config.username, password: this.config.password});
}

/**
 * Register a callback url to the Orbiwise server to receive updates sent by device
 * @function registerCallback
 * @param {Object} [callback] the configuration of the callback. If not defined, defaults to the callback variable in "/lib/orbiwise/config"
 * @param {String} [callback.host] e.g. "https://electronica.scriptrapps.io", 
 * @param {String} [callback.port], port number, optional
 * @param {String} [callback.path_prefix]: the path to the callback script
 * @param {String} [callback.auth_string]: optional, the authorization header, e.g. "Bearer YOUR_AUTH_TOKEN"
 * @param {Number} [callback.retry_policy]: 0 = no retry, 1 = retry. Optional. Defaults to 1
 * @return 
 * @throws {Error}
 */
OrbiwiseServer.prototype.registerCallback = function(callback) {

    callback = callback ? callback : this.config.callback; 
    if (!callback || !callback.host || !callback.path_prefix) {

        throw {

            errorCode: "INVALID_PARAMETER",
            errorDetail: "OrbiwiseServer.registerCallback: callback.host and callback.path_prefix cannot be null or empty"
        };
    }

    var callbackClone = JSON.parse(JSON.stringify(callback));
    callbackClone.retry_policy = callbackClone.retry_policy ? callbackClone.retry_policy : 1;

    var instruction = {

        url: this.config.orbiwiseUrl + "/rest/pushmode/start",
        method: "PUT",
        bodyString: JSON.stringify(callbackClone)
    };

    return this.client.callApi(instruction);
};

/**
 * Unregister callbacks from the Orbiwise server to stop receiving updates sent by devices
 * @function unregisterCallbacks
 * @return 
 * @throws {Error}
 */
OrbiwiseServer.prototype.unregisterCallbacks = function(callback) {

    var instruction = {

        url: this.config.orbiwiseUrl + "/rest/pushmode/stop",
        method: "PUT"
    };

    return this.client.callApi(instruction);
};

/**
 * @function getLatestPayload
 * @param {String} target device deveui (id)
 * @return {Object} device payload
 * @throw {Error}
 */
OrbiwiseServer.prototype.getLatestPayload = function(deveui) {

    if (!deveui) {

        throw {

            errorCode: "INVALID_PARAMETER",
            errorDetail: "OrbiwiseServer.getLatestPayload: deveui cannot be null or empty"
        };
    }

    var instruction = {

        url: this.config.orbiwiseUrl + "/rest/nodes/" + deveui + "/payloads/ul/latest",
        method: "GET"
    };

    return this.client.callApi(instruction);
};

/**
 * List all payloads of a given device
 * @function listPayloads
 * @param {String} target device deveui (id)
 * @return {Array} device payloads
 * @throw {Error}
 */
OrbiwiseServer.prototype.listPayloads = function(deveui) {

    if (!deveui) {

        throw {

            errorCode: "INVALID_PARAMETER",
            errorDetail: "OrbiwiseServer.listPayloads: deveui cannot be null or empty"
        };
    }

    var instruction = {

        url: this.config.orbiwiseUrl + "/rest/nodes/" + deveui + "/payloads/ul",
        method: "GET"
    };

    return this.client.callApi(instruction);
};

/**
 * @function checkDownlinkPayloadStatus
 * @param {Object} [dto]
 * @param {String} [dto.deveui]: target device deveui (id)
 * @param {String} [dto.msgid]: downlink msg id
 * @return {Object}
 * @throw {Error}
 */
OrbiwiseServer.prototype.checkDownlinkPayloadStatus = function(dto) {

    if (!dto || !dto.deveui || !dto.msgid) {

        throw {

            errorCode: "Missing_Parameter",
            errorDetail: "OrbiwiseServer.checkDownlinkPayloadStatus: dto.devui and dto.msgid cannot be null or empty"
        };
    }

    var instruction = {

        url: this.config.orbiwiseUrl + "/rest/nodes/" + dto.deveui + "/payloads/dl/" + dto.msgid,
        method: "GET"
    };

    return this.client.callApi(instruction);
};


/**
 * @function deleteDownlinkPayload
 * @param {Object} [dto]
 * @param {String} [dto.deveui]: target device deveui (id)
 * @param {String} [dto.msgid]: downlink msg id
 * @return {String} "OK" if successful
 * @throw {Error}
 */
OrbiwiseServer.prototype.deleteDownlinkPayload = function(dto) {

    if (!dto || !dto.deveui || !dto.msgid) {

        throw {

            errorCode: "Missing_Parameter",
            errorDetail: "OrbiwiseServer.deleteDownlinkPayload: dto.devui and dto.msgid cannot be null or empty"
        };
    }

    var instruction = {

        url: this.config.orbiwiseUrl + "/rest/nodes/" + dto.deveui + "/payloads/dl/" + dto.msgid,
        method: "DELETE"
    };

    return this.client.callApi(instruction);
};

/**
 * Send downlink data to the device throgh the Orbiwiser platfrom
 * @function sendData
 * @param {Object} [dto]
 * @param {String} [dto.port] : optional, device port, defaults to 1
 * @param {String} [dto.fcnt]: otpional, name of decryption function
 * @param {String} [dto.confirmed]: optional, send true if you need the device to confirm reception of the message
 * @return {Object}
 * @throw {Error}
 */
OrbiwiseServer.prototype.sendData = function(dto) {

    if (!dto || !dto.payload || !dto.deveui) {

        throw {

            errorCode: "INVALID_PARAMETER",
            errorDetail: "OrbiwiseServer.sendData: dto.payload and dto.deveui cannot be null or empty"
        };
    }

    var url = this.config.orbiwiseUrl + "/rest/nodes/" + dto.deveui + "/payloads/dl";
    var addPort = dto.port ? "port=" + dto.port : "port=1";
    var addFcnt = dto.fcnt ? "fcnt=" +  dto.fcnt : "";
    var addConfirmed = (dto.confirmed == true || dto.confirmed == false) ? "confimed=" + dto.confirmed : "";
    if (addPort) {
        url += "?"+ addPort;
    }

    if (addFcnt) {
        url += (url.indexOf("?") > -1) ? ("&" + addFcnt) : ("?" + addFcnt);
    }

    if (addConfirmed) {
        url += (url.indexOf("?") > -1) ? ("&" + addConfirmed) : ("?" + addConfirmed);
    }


    var instruction = {

        url: url,
        method: "POST",
        params: btoa(dto.payload)
    };

    return this.client.callApi(instruction);
};

/**
 * @function listNodes
 * @return {Array} list of nodes
 * @throw {Error}
 */
OrbiwiseServer.prototype.listNodes = function() {

    var instruction = {

        url: this.config.orbiwiseUrl + "/rest/nodes",
        method: "GET"
    };

    return this.client.callApi(instruction);
};

/**
 * @function getNode
 * @return {Object} data of a single node
 * @throw {Error}
 */
OrbiwiseServer.prototype.getNode = function(deveui) {

    if (!deveui) {

        throw {

            errorCode: "INVALID_PARAMETER",
            errorDetail: "OrbiwiseServer.getNode: deveui cannot be null or empty"
        };
    }
    
    var instruction = {

        url: this.config.orbiwiseUrl + "/rest/nodes/" + deveui,
        method: "GET"
    };

    return this.client.callApi(instruction);
};
